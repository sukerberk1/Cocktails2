@using Cocktails2.Domain.Entities
@using Cocktails2.Domain.Enums
@using Cocktails2.Application.Services.Interfaces
@using Cocktails2.Domain.Extensions
@using Cocktails2.Pages.Components
@inject ICocktailService cocktailService

<button type="button" class="btn btn-secondary mt-3" @onclick="ToggleRecipe.Invoke">Go back</button>

<h2 class="text-center mt-3 mb-3">Fill up the recipe</h2>


    @foreach (IngredientPortion portion in IngredientPortions)
{
        <div class="card mb-3">
            <div class="row g-0">
                <div class="col-md-4">
                    <img src="@portion.Ingredient.Photo.ImageSource()" class="img-fluid rounded-start card-img" alt="...">
                </div>
                <div class="col-md-8">
                    <div class="card-body">
                        <h5 class="card-title">@portion.Ingredient.Name</h5>
                        <p class="card-text">@portion.Ingredient.Description</p>
                        <div class="row">
                            <div class="col-auto">Quantity: </div>
                            <div class="col-auto">
                                <input class="form-control" type="text" aria-label="ingredient-quantity" @bind-value="portion.Amount">
                                </div>
                            <div class="col-auto">
                                @if (portion.Ingredient.Type == IngredientType.Other || portion.Ingredient.Type == IngredientType.Garnish)
                                {
                                    <span>slices/pieces</span>
                                }
                                else
                                {
                                    <span>mililiters</span>
                                }
                            </div>
                        </div>
                            

                    </div>
                </div>
            </div>
        </div>
}


<h2 class="mb-5 mt-5 text-center"> Complete the details </h2>
<div class="form-floating mb-3">
    <input type="text" class="form-control" id="floatingInput1" @bind-value="cocktail.Name">
    <label for="floatingInput1">Cocktail's name</label>
</div>
<div class="form-floating mb-3">
    <input type="text" class="form-control" id="floatingInput2" @bind-value="cocktail.Description">
    <label for="floatingInput2">Cocktail's description</label>
</div>
<div class="mb-3">
    <label for="formFile" class="form-label">Drag file image.</label>
    <InputFile class="form-control" id="formFile" OnChange="@LoadFilesAsync"/>
</div>
<label>Choose cocktail's origin:</label>
<select class="form-select mb-3 p-2" aria-label="Cocktail origin select" @bind="cocktail.Origin">
    @foreach (CocktailOrigin origin in Enum.GetValues(typeof(CocktailOrigin)))
    {
        <option value="@origin.ToString()">@origin.ToDisplay()</option>
    }
</select>

<h2 class="text-center mb-3 mt-3">Preview</h2>

@if(showPreview)
{
    <CocktailPreviewModal cocktail="cocktail"></CocktailPreviewModal>
}

@if(validationError)
{
    <div class="alert alert-danger" role="alert">
        Something is wrong with your cocktail. Check the ingredients and details and try again.
    </div>
}

<div class="d-grid gap-3 mb-5 mt-4">
    @if (creationSuccess)
    {
        <button class="btn btn-success" type="button" disabled>Cocktail added!</button>
    }
    else
    {
        <button class="btn btn-primary" type="button" @onclick="HandleAddCocktail">Create a cocktail</button>
    }
    Dupa
</div>


@code {
    [Parameter]
    public List<IngredientPortion> IngredientPortions { get; set; }

    [Parameter]
    public Action ToggleRecipe { get; set; }

    private Cocktail cocktail = new();

    private bool showPreview = true;

    private bool creationSuccess = false;

    private bool validationError = false;

    protected override void OnInitialized()
    {
        cocktail.IngredientPortions = IngredientPortions;
    }

    private async Task LoadFilesAsync(InputFileChangeEventArgs e)
    {
        using (var memoryStream = new MemoryStream())
        {
            await e.File.OpenReadStream().CopyToAsync(memoryStream);
            Console.WriteLine(" FILE STRAM LENGTH: " + memoryStream.Length);
            cocktail.Photo = new Domain.ValueObjects.Picture(memoryStream.ToArray());
        }
    }


    private async Task HandleAddCocktail()
    {
        cocktail.IngredientPortions = IngredientPortions;
        if (cocktail.Photo == null)
        {
            cocktail.Photo = new Domain.ValueObjects.Picture(
                await Persistence.Misc.ImageConverterService.ConvertUriToByteArrayAsync("https://jangorecipes.com/wp-content/uploads/2021/10/image-8-1.jpg")
                );
            Console.WriteLine("Picture set to default, no picture supplied or found.");
        }
        

        cocktail.CreatedOn = DateTime.Now;
        cocktail.UpdatedOn = DateTime.Now;
        if (!cocktail.IsValid())
        {
            validationError = true;
            Console.WriteLine("Cocktail Validation error");
            return;
        }
        try
        {
            await cocktailService.AddCocktailAsync(cocktail);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Console.WriteLine("Cocktail creation failed");
        }
        validationError = false;
        creationSuccess = true;
    }

}
