@using Cocktails2.Application.Services.Interfaces
@using Cocktails2.Domain.Entities
@using Cocktails2.Domain.Enums
@inject IIngredientService ingredientService



<div class="row">
    <div class="col-md-6">
        <h2>Available ingredients</h2>
        <div class="mb-3">
            <label for="exampleInputEmail1" class="form-label">Search for an ingredient: </label>
            <input type="text" class="form-control" @oninput="(e)=> HandleSearchInput(e.Value.ToString())" />
        </div>

        <div class="list-group  ingredient-box">
            @if (availableIngredients == null)
            {
                <a href="#" class="list-group-item list-group-item-action">
                    <div class="d-flex w-100 justify-content-between">
                        <h5 class="mb-1">Loading...</h5>
                    </div>
                </a>
            }
            else
            {
                @foreach (var ingredient in availableIngredients)
                {
                    if (IngredientPortions.ConvertAll(i => i.Ingredient).Contains(ingredient))
                    {
                        <div class="card mb-3  bg-secondary" style="max-width: 540px;" @onclick="()=>ChooseIngredient(ingredient)">
                            <div class="row g-0">
                                <div class="col-md-4">
                                    <img src="@ingredient.PhotoUrl.OriginalString" class="img-fluid rounded-start card-img" alt="ingredient photo">
                                </div>
                                <div class="col-md-8">
                                    <div class="card-body">
                                        <h5 class="card-title">@ingredient.Name</h5>
                                        <p class="card-text">@ingredient.Description</p>
                                        <p class="card-text"><small class="text-muted">@Enum.GetName(typeof(IngredientType), ingredient.Type)</small></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="card mb-3" style="max-width: 540px;" @onclick="()=>ChooseIngredient(ingredient)">
                            <div class="row g-0">
                                <div class="col-md-4">
                                    <img src="@ingredient.PhotoUrl.OriginalString" class="img-fluid rounded-start card-img" alt="ingredient photo">
                                </div>
                                <div class="col-md-8">
                                    <div class="card-body">
                                        <h5 class="card-title">@ingredient.Name</h5>
                                        <p class="card-text">@ingredient.Description</p>
                                        <p class="card-text"><small class="text-muted">@Enum.GetName(typeof(IngredientType), ingredient.Type)</small></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            }

        </div>
    </div>

    <div class="col-md-6">
        <h2>Chosen ingredients</h2>
        <label for="exampleInputEmail1" class="form-label">To create a recipe you need at least 3 ingredients </label>

        <div class="list-group  ingredient-box">
            @if (IngredientPortions == null)
            {
                <a href="#" class="list-group-item list-group-item-action">
                    <div class="d-flex w-100 justify-content-between">
                        <h5 class="mb-1">Loading...</h5>
                    </div>
                </a>
            }
            else
            {
                @foreach (var ingredient in IngredientPortions.ConvertAll(i=> i.Ingredient))
                {

                        <div class="card mb-3" style="max-width: 540px;" @onclick="()=>ChooseIngredient(ingredient)">
                            <div class="row g-0">
                                <div class="col-md-4">
                                    <img src="@ingredient.PhotoUrl.OriginalString" class="img-fluid rounded-start card-img" alt="ingredient photo">
                                </div>
                                <div class="col-md-8">
                                    <div class="card-body">
                                        <h5 class="card-title">@ingredient.Name</h5>
                                        <p class="card-text">@ingredient.Description</p>
                                        <p class="card-text"><small class="text-muted">@Enum.GetName(typeof(IngredientType), ingredient.Type)</small></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                }
            }

        </div>

        <div class="mb-3 mt-3">
            
            <div class="d-grid gap-2">
                @if(IngredientPortions != null && IngredientPortions.Count >= 3)
                {
                    <button class="btn btn-primary" type="button" @onclick="ToggleRecipe.Invoke">Next</button>
                }
                else
                {
                    <button class="btn btn-primary" type="button" disabled>Next</button>
                }

            </div>
        </div>


    </div>


</div>



@code {

    [Parameter]
    public List<IngredientPortion> IngredientPortions { get; set; }

    [Parameter]
    public Action ToggleRecipe { get; set; }

    private List<Ingredient> ingredients = new();

    private List<Ingredient> availableIngredients = new();

    protected override async Task OnInitializedAsync()
    {
        ingredients = (List<Ingredient>)await ingredientService.GetAllIngredientsAsync();
        availableIngredients = ingredients;
    }

    private void ChooseIngredient(Ingredient ingr)
    {
        if (!IngredientPortions.ConvertAll(i => i.Ingredient).Contains(ingr))
            IngredientPortions.Add(
                new IngredientPortion { Ingredient = ingr }
            );
    }
    private void RemoveIngredient(IngredientPortion ingr)
    {
        IngredientPortions.Remove(ingr);
    }

    private void HandleSearchInput(string search)
    {
        if (search == null)
        {
            availableIngredients = ingredients;
            return;
        }
        availableIngredients = ingredients.Where(ingr => ingr.Name.ToLower().StartsWith(search.ToLower())).ToList();
    }

}
