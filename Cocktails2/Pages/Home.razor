@page "/"
@using Cocktails2.Application.Services.Interfaces

@*This should be changed to use dtos instead of domain entities (??)*@
@using Cocktails2.Domain.Entities
@using Cocktails2.Persistence.DAO

@inject ICocktailService cocktailService

<PageTitle>Cock's cocktails</PageTitle>


@if (cocktails == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-3 card-wrapper">
            <div class="card text-center">
                <div class="card-body mt-2">
                    <h5 class="card-title">Add your own recipe</h5>
                    <h6 class="card-subtitle mb-2 text-muted">Become a part of cock's cocktails!</h6>
                    <NavLink class="nav-link" href="/add-cocktail" Match="NavLinkMatch.All">
                        <div href="#" class="btn btn-primary add-button">+ Add new</div>
                    </NavLink>
                </div>
            </div>
        </div>
        @foreach (var cock in cocktails)
        {
            <div class="col-md-3 card-wrapper">
                <div class="card" style="width: 18rem;">
                    <img src="@cock.PhotoUrl.OriginalString" class="card-img-top" alt="cocktail photo">
                    <div class="card-body">
                        <h5 class="card-title">@cock.Name</h5>
                        <p class="card-text">@cock.Description.Substring(0,100)...</p>
                        <NavLink href="#" class="card-link">See more</NavLink>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private IReadOnlyCollection<Cocktail> cocktails = new List<Cocktail>();
    private IEnumerable<CocktailDao> cocktailDaos = new List<CocktailDao>();

    protected override async Task OnInitializedAsync()
    {
        cocktails = await cocktailService.GetAllCocktailsAsync();
    }
}
